{"version":3,"sources":["components/Cluster.ts","components/CityMarker.tsx","components/GoogleMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cluster","obj","Object","assign","this","data","map","maps","mapMarkers","city","location","lat","lng","Marker","position","visible","markerClusterer","MarkerClusterer","styles","width","height","className","clusterClass","Array","singleClusters","getClusters","cluster","getMarkers","filter","group","length","locations","forEach","loc","marker","getPosition","push","CityTooltip","withStyles","theme","tooltip","backgroundColor","color","maxWidth","fontSize","typography","pxToRem","Tooltip","CityMarker","props","title","Typography","country","population","toLocaleString","capital","GoogleMap","useState","shownCities","setShownCities","setCitiesToShow","getMarkersInView","citiesToShow","i","cities","key","id","bootstrapURLKeys","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","setMarkerCluster","addListener","setTimeout","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","setCenter","handleApiLoaded","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04dc5037.chunk.js","sourcesContent":["import MarkerClusterer from \"@google/markerclustererplus\";\r\nimport \"../styles/GoogleMap.scss\";\r\nimport { City, Location } from \"../types\";\r\n\r\nclass Cluster {\r\n  private static markerClusterer: MarkerClusterer;\r\n\r\n  constructor(obj: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n\r\n  static setMarkerCluster(data: City[], map: any, maps: any) {\r\n    const markerStyles = [\r\n      {\r\n        width: 35,\r\n        height: 35,\r\n        className: \"cluster-icon\",\r\n      },\r\n      {\r\n        width: 45,\r\n        height: 45,\r\n        className: \"cluster-icon\",\r\n      },\r\n      {\r\n        width: 55,\r\n        height: 55,\r\n        className: \"cluster-icon\",\r\n      },\r\n    ];\r\n\r\n    const mapMarkers = data.map((city: City): any => {\r\n      const location = { lat: city.lat, lng: city.lng };\r\n      const marker = new maps.Marker({\r\n        position: location,\r\n        visible: false,\r\n      });\r\n\r\n      return marker;\r\n    });\r\n\r\n    this.markerClusterer = new MarkerClusterer(map, mapMarkers, {\r\n      styles: markerStyles,\r\n      clusterClass: \"cluster-icon\",\r\n    });\r\n  }\r\n\r\n  static getMarkerClusterer(): MarkerClusterer {\r\n    return this.markerClusterer;\r\n  }\r\n\r\n  static getMarkersInView(): Location[] {\r\n    if (!this.markerClusterer) {\r\n      return new Array<Location>();\r\n    }\r\n\r\n    const singleClusters = this.markerClusterer\r\n      .getClusters()\r\n      .map((cluster) => cluster.getMarkers())\r\n      .filter((group) => group.length === 1);\r\n\r\n    const locations: any[] = [];\r\n    singleClusters.forEach((cluster) => {\r\n      const loc = cluster.map((marker: any) => ({\r\n        lat: marker.getPosition().lat(),\r\n        lng: marker.getPosition().lng(),\r\n      }));\r\n      locations.push(loc[0]);\r\n    });\r\n    return locations;\r\n  }\r\n}\r\n\r\nexport default Cluster;\r\n","import React from \"react\";\r\nimport \"../styles/GoogleMap.scss\";\r\nimport { City } from \"../types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\ntype CityMarkerProps = { city: City; lat: number; lng: number };\r\n\r\nconst CityTooltip = withStyles((theme) => ({\r\n  tooltip: {\r\n    backgroundColor: \"#f5f5f9\",\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    maxWidth: 350,\r\n    fontSize: theme.typography.pxToRem(12),\r\n  },\r\n}))(Tooltip);\r\n\r\nconst CityMarker = (props: CityMarkerProps) => {\r\n  const getHoverInfo = () => {\r\n    return (\r\n      <>\r\n        <Typography color=\"inherit\">Country: {props.city.country}</Typography>\r\n        <Typography color=\"inherit\">\r\n          Location: {`(${props.city.lat}, ${props.city.lng})`}\r\n        </Typography>\r\n        <Typography color=\"inherit\">\r\n          Population:{\" \"}\r\n          {props.city.population\r\n            ? props.city.population.toLocaleString()\r\n            : \"Unknown\"}\r\n        </Typography>\r\n        {props.city.capital ? (\r\n          <Typography color=\"inherit\">Capital City</Typography>\r\n        ) : null}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CityTooltip title={getHoverInfo()}>\r\n      <div className=\"city-marker\">{props.city.city}</div>\r\n    </CityTooltip>\r\n  );\r\n};\r\n\r\nexport default CityMarker;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport \"../styles/GoogleMap.scss\";\r\nimport cities from \"../data/worldcities.json\";\r\nimport Cluster from \"./Cluster\";\r\nimport CityMarker from \"./CityMarker\";\r\nimport { City } from \"../types\";\r\n\r\nconst GoogleMap: React.FC = () => {\r\n  const [shownCities, setShownCities] = useState(Array<JSX.Element>());\r\n  const startLocation = { lat: 40.695321, lng: -74.046293 };\r\n\r\n  const handleApiLoaded = (map: any, maps: any) => {\r\n    Cluster.setMarkerCluster(cities, map, maps);\r\n\r\n    // Listen to events to show the markers\r\n    map.addListener(\"bounds_changed\", () => setCitiesToShow());\r\n    map.addListener(\"zoom_changed\", () =>\r\n      setTimeout(() => setCitiesToShow(), 1000)\r\n    );\r\n    map.addListener(\"drag\", () => setCitiesToShow());\r\n\r\n    // Set location to user location\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      const loc = {\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude,\r\n      };\r\n      map.setCenter(loc);\r\n      setCitiesToShow();\r\n    });\r\n  };\r\n\r\n  const setCitiesToShow = (): void => {\r\n    const locations = Cluster.getMarkersInView();\r\n    let citiesToShow = new Array<City>();\r\n\r\n    // Match locations to cities\r\n    locations.forEach((location) => {\r\n      for (let i = 0; i < cities.length; i++) {\r\n        if (cities[i].lat === location.lat && cities[i].lng === location.lng) {\r\n          citiesToShow.push(cities[i]);\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    setShownCities(\r\n      citiesToShow.map((city) => (\r\n        <CityMarker lat={city.lat} lng={city.lng} city={city} key={city.id} />\r\n      ))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"google-map\">\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"\" }}\r\n        defaultCenter={startLocation}\r\n        defaultZoom={9}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}\r\n      >\r\n        {shownCities}\r\n      </GoogleMapReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleMap;\r\n","import React from \"react\";\r\nimport GoogleMap from \"./components/GoogleMap\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GoogleMap />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}